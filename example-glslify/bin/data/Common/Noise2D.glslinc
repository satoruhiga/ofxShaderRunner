//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

// -------------------------------------------------------------------------------------
//
float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

// -------------------------------------------------------------------------------------
//
float snoiseu(vec2 v)
{
	return (snoise( v ) + 1.0) * 0.5;
}

// -------------------------------------------------------------------------------------
//
float fbm_5oct( vec2 p )
{
	float f = 0.0;
	f += 0.50000*snoise( p ); p = p*2.02;
	f += 0.25000*snoise( p ); p = p*2.03;
	f += 0.12500*snoise( p ); p = p*2.01;
	f += 0.06250*snoise( p ); p = p*2.04;
	f += 0.03125*snoise( p );
	return f/0.984375;
}

// -------------------------------------------------------------------------------------
// Standard is _lacunarity = 2.0 and _persistence = 0.5
//
float fbm(vec2 P, int octaves, float lacunarity, float gain)
{
	float sum = 0.0;
	float amp = 1.0;
	vec2 pp = P;

	for( int i = 0; i < octaves; i+=1)
	{
		amp *= gain;
		sum += amp * snoise(pp);
		pp *= lacunarity;
	}

	return sum;
}

// -------------------------------------------------------------------------------------
// Returns the FBM in the range 0..1
//
float fbmu(vec2 _p, int _octaves, float _lacunarity, float _persistence )
{
	return (fbm( _p, _octaves, _lacunarity, _persistence ) + 1.0) * 0.5;
}

