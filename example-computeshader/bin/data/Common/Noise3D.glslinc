//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

// -------------------------------------------------------------------------------------
//
float snoise(vec3 v)
{
	  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
	  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

	// First corner
	  vec3 i  = floor(v + dot(v, C.yyy) );
	  vec3 x0 =   v - i + dot(i, C.xxx) ;

	// Other corners
	  vec3 g = step(x0.yzx, x0.xyz);
	  vec3 l = 1.0 - g;
	  vec3 i1 = min( g.xyz, l.zxy );
	  vec3 i2 = max( g.xyz, l.zxy );

	  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
	  //   x1 = x0 - i1  + 1.0 * C.xxx;
	  //   x2 = x0 - i2  + 2.0 * C.xxx;
	  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
	  vec3 x1 = x0 - i1 + C.xxx;
	  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

	// Permutations
	  i = mod289(i); 
	  vec4 p = permute( permute( permute( 
				 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
			   + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
			   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
	  float n_ = 0.142857142857; // 1.0/7.0
	  vec3  ns = n_ * D.wyz - D.xzx;

	  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

	  vec4 x_ = floor(j * ns.z);
	  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

	  vec4 x = x_ *ns.x + ns.yyyy;
	  vec4 y = y_ *ns.x + ns.yyyy;
	  vec4 h = 1.0 - abs(x) - abs(y);

	  vec4 b0 = vec4( x.xy, y.xy );
	  vec4 b1 = vec4( x.zw, y.zw );

	  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	  vec4 s0 = floor(b0)*2.0 + 1.0;
	  vec4 s1 = floor(b1)*2.0 + 1.0;
	  vec4 sh = -step(h, vec4(0.0));

	  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

	  vec3 p0 = vec3(a0.xy,h.x);
	  vec3 p1 = vec3(a0.zw,h.y);
	  vec3 p2 = vec3(a1.xy,h.z);
	  vec3 p3 = vec3(a1.zw,h.w);

	//Normalise gradients
	  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
	  p0 *= norm.x;
	  p1 *= norm.y;
	  p2 *= norm.z;
	  p3 *= norm.w;

	// Mix final noise value
	  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
	  m = m * m;
	  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
									dot(p2,x2), dot(p3,x3) ) );
}

// -------------------------------------------------------------------------------------
//
float fbm_2oct(vec3 p)
{
	float final = snoise(p);
	p *= 1.94;
	final += snoise(p) * 0.5;
	return final / 1.5;
}

// -------------------------------------------------------------------------------------
//
float fbm_3oct(vec3 p)
{
	float final = snoise(p);
	p *= 1.94;
	final += snoise(p) * 0.5;
	p *= 3.75;
	final += snoise(p) * 0.25;
	return final / 1.75;

}

// -------------------------------------------------------------------------------------
//
float fbm_5oct( vec3 p )
{
	float f = 0.0;
	f += 0.50000*snoise( p ); p = p*2.02;
	f += 0.25000*snoise( p ); p = p*2.03;
	f += 0.12500*snoise( p ); p = p*2.01;
	f += 0.06250*snoise( p ); p = p*2.04;
	f += 0.03125*snoise( p );
	return f/0.984375;
}

// -------------------------------------------------------------------------------------
// Standard is _lacunarity = 2.0 and _persistence = 0.5
//
float fbm(vec3 _p, int _octaves, float _lacunarity, float _persistence )
{
	float sum = 0.0;
	float amp = 1.0;
	vec3 pp = _p;
	float totalAmp = 0.0;
	
	for( int i = 0; i < _octaves; i++)
	{
		amp *= _persistence;
		totalAmp += amp;
		sum += amp * snoise(pp);
		pp *= _lacunarity;
	}
	
	return sum / totalAmp;
}

// -------------------------------------------------------------------------------------
// Returns the FBM in the range 0..1
//
float fbmu(vec3 _p, int _octaves, float _lacunarity, float _persistence )
{
	return (fbm( _p, _octaves, _lacunarity, _persistence ) + 1.0) * 0.5;
}
